package com.example.miexploit;

import java.io.IOException;
import java.util.Set;

import android.app.Activity;
import android.app.PendingIntent;
import android.bluetooth.*;
import android.content.Intent;
import android.nfc.NfcAdapter;
import android.nfc.Tag;
import android.nfc.tech.MifareClassic;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.*;

import android.nfc.tech.NfcA;
import com.example.util.BluetoothUtil;

public class MainActivity extends Activity {

	private static final String TAG = "MainActivity";
    private static final int REQUEST_CONNECT_DEVICE_SECURE = 1;
    private static final int REQUEST_CONNECT_DEVICE_INSECURE = 2;
    private static final int REQUEST_ENABLE_BT = 3;
    
    // Message types sent from the BluetoothChatService Handler
    public static final int MESSAGE_STATE_CHANGE = 1;
    public static final int MESSAGE_READ = 2;
    public static final int MESSAGE_WRITE = 3;
    public static final int MESSAGE_DEVICE_NAME = 4;
    
    // Layout Views
    private static Button bluetoothButton;
    private static Button mSendButton;
    private static TextView mview;
    private static EditText editText;

    // Name of the connected device
    private static String mConnectedDeviceName = null;

    
    public static final String DEVICE_NAME = "device_name";
    // String buffer for outgoing messages
    private StringBuffer mOutStringBuffer;
    // Local Bluetooth adapter
    private BluetoothAdapter mBluetoothAdapter = null;
    private BluetoothUtil btutil;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		// enable foreground dispatch
		NfcAdapter mAdapter = NfcAdapter.getDefaultAdapter(this);
		PendingIntent pendingIntent = PendingIntent.getActivity(this, 0,
				new Intent(this, getClass())
						.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), 0);

		// Get local Bluetooth adapter
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		if (mBluetoothAdapter == null) {
			Log.i(TAG, "no bluetooth support");
			finish();
		}

		editText = (EditText) findViewById(R.id.titleText);
		editText.setText("foo new");
		mSendButton = (Button) findViewById(R.id.button2);
		bluetoothButton = (Button) findViewById(R.id.button1);
		mview = (TextView) findViewById(R.id.textView1);
		
		bluetoothButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				// Send a message using content of the edit text widget
				//String message = mview.getText().toString();
		        connectDevice();
				//sendMessage(editText.getText().toString());
			}
		});
		
		mSendButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				// Send a message using content of the edit text widget
				String message = editText.getText().toString();
		        //connectDevice();
				Log.i(TAG, message);
				sendMessage(message);
			}
		});
		
        // Initialize the BluetoothChatService to perform bluetooth connections
        btutil = new BluetoothUtil(this, mHandler);
        // Initialize the buffer for outgoing messages
        mOutStringBuffer = new StringBuffer("");
        
		Log.i(TAG, "finished creating new");
		resolveIntent(getIntent());
	}

    @Override
    public void onStart() {
        super.onStart();
        Log.d(TAG, "starting");
        // If BT is not on, request that it be enabled.
        // setupChat() will then be called during onActivityResult
        if (!mBluetoothAdapter.isEnabled()) {
        	Log.d(TAG, "enable bluetooth");
            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
        }
        Log.d(TAG, "enabled bluetooth");
        ensureDiscoverable();
        
    }
    
    @Override
    public synchronized void onResume() {
        super.onResume();
        Log.e(TAG, "+ ON RESUME +");

        // Performing this check in onResume() covers the case in which BT was
        // not enabled during onStart(), so we were paused to enable it...
        // onResume() will be called when ACTION_REQUEST_ENABLE activity returns.
        if (btutil != null) {
            // Only if the state is STATE_NONE, do we know that we haven't started already
            if (btutil.getState() == BluetoothUtil.STATE_NONE) {
              // Start the Bluetooth chat services
              btutil.start();
            }
        }
    }
    
    @Override
    public synchronized void onPause() {
        super.onPause();
        Log.e(TAG, "- ON PAUSE -");
    }

    @Override
    public void onStop() {
        super.onStop();
        Log.e(TAG, "-- ON STOP --");
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        // Stop the Bluetooth chat services
        if (btutil != null) btutil.stop();
        Log.e(TAG, "--- ON DESTROY ---");
    }
    
	void connectMifare(MifareClassic mifare) {
		try {
			mifare.connect();
			int blockCount = mifare.getBlockCount();
			int blockCountForSector = mifare.getBlockCountInSector(0);
			int sectorCount = mifare.getSectorCount();
			Log.i(TAG, "block count: " + blockCount);
			Log.i(TAG, "sector count: " + sectorCount);
			Log.i(TAG, "block for sector count: " + blockCountForSector);
			Log.i(TAG, "first block of sector0: " + mifare.sectorToBlock(0));

			byte[] blockData = mifare.readBlock(0);
			Log.i(TAG, "data for block: " + blockData);

		} catch (IOException e) {
			Log.e(TAG, "caught IO exception while connection to mifare", e);
		} finally {
			try {
				mifare.close();
			} catch (IOException e) {
				Log.e(TAG, "IOException while closing mifare", e);
			}
		}
		Log.i(TAG, "done reading mifare");

	}

	void resolveIntent(Intent intent) {
		Log.i(TAG, "resolving intent");
		Tag tag = intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);

		if (tag != null) {
			Log.i(TAG, "found a tag");
			MifareClassic mifare = MifareClassic.get(tag);

			connectMifare(mifare);

			NfcA nfca = NfcA.get(tag);
			byte[] bArray = new byte[8];
			byte[] res;
			byte[] cmdWake = new byte[] { (byte) 0x26 };

			bArray[0] = 0x26;
			try {
				nfca.connect();
				Log.i(TAG, "connected NFCA tag");
				res = nfca.transceive(cmdWake);
				Log.i(TAG, "got response: " + res.toString());

			} catch (IOException e) {
				Log.e(TAG, "caught IO exception", e);
			} finally {
				try {
					nfca.close();
				} catch (IOException e) {
					Log.e(TAG, "caught IO exception", e);
				}
			}

			EditText editText = (EditText) findViewById(R.id.titleText);
			editText.setText("resolving intent");
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.activity_main, menu);
		Log.i(TAG, "created options");
		return true;
	}

	@Override
	public void onNewIntent(Intent intent) {
		EditText editText = (EditText) findViewById(R.id.titleText);
		editText.setText("got new intent");
		Log.i(TAG, "new intent");
	}
	
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        Log.d(TAG, "onActivityResult " + resultCode);
        switch (requestCode) {
        case REQUEST_CONNECT_DEVICE_SECURE:
            // When DeviceListActivity returns with a device to connect
            if (resultCode == Activity.RESULT_OK) {
                connectDevice();
            }
            break;
        case REQUEST_CONNECT_DEVICE_INSECURE:
            // When DeviceListActivity returns with a device to connect
            if (resultCode == Activity.RESULT_OK) {
                connectDevice();
            }
            break;
        case REQUEST_ENABLE_BT:
            // When the request to enable Bluetooth returns
            if (resultCode == Activity.RESULT_OK) {
                // Bluetooth is now enabled, so set up a chat session
                // Initialize the BluetoothChatService to perform bluetooth connections
                btutil = new BluetoothUtil(this, mHandler);
                // Initialize the buffer for outgoing messages
                mOutStringBuffer = new StringBuffer("");
                Log.i(TAG, "enabled Bluetooth");
            } else {
                // User did not enable Bluetooth or an error occurred
                Log.d(TAG, "BT not enabled");
                finish();
            }
        }
    }
    
    // The Handler that gets information back from the BluetoothChatService
    private static final Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
            case MESSAGE_STATE_CHANGE:
                Log.i(TAG, "MESSAGE_STATE_CHANGE: ");
                switch (msg.arg1) {
                case BluetoothUtil.STATE_CONNECTED:
                    Log.i(TAG, "bluetooth connected");
                    mview.setText("bluetooth connected" );
                    break;
                case BluetoothUtil.STATE_CONNECTING:
                	Log.i(TAG, "bluetooth connecting");
                    mview.setText("bluetooth connecting");
                    break;
                case BluetoothUtil.STATE_LISTEN:
                case BluetoothUtil.STATE_NONE:
                	Log.i(TAG, "bluetooth not connected");
                    mview.setText("bluetooth not connected");
                    break;
                }
                break;
            case MESSAGE_WRITE:
                byte[] writeBuf = (byte[]) msg.obj;
                // construct a string from the buffer
                String writeMessage = new String(writeBuf);
                Log.i(TAG, "write message " + writeMessage);
                mview.setText("I write: "+ writeMessage);
                break;
            case MESSAGE_READ:
                byte[] readBuf = (byte[]) msg.obj;
                // construct a string from the valid bytes in the buffer
                String readMessage = new String(readBuf, 0, msg.arg1);
                Log.i(TAG, "read message " + readMessage);
                mview.setText(mConnectedDeviceName + ": "+ readMessage);
                break;
            case MESSAGE_DEVICE_NAME:
                // save the connected device's name
                mConnectedDeviceName = msg.getData().getString(DEVICE_NAME);
                Log.i(TAG, "Connected to "+ mConnectedDeviceName);
                //mview.setText("Connected to "+ mConnectedDeviceName);
                break;
            }
        }
    };
    
    private void ensureDiscoverable() {
        Log.d(TAG, "ensure discoverable");
        if (mBluetoothAdapter.getScanMode() !=
            BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE) {
            Intent discoverableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
            discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 300);
            startActivity(discoverableIntent);
        }
    }
	
	private void sendMessage(String message) {
        // Check that we're actually connected before trying anything
        if (btutil.getState() != BluetoothUtil.STATE_CONNECTED) {
            Log.e(TAG, "not connected");
            return;
        }

        // Check that there's actually something to send
        if (message.length() > 0) {
            // Get the message bytes and tell the BluetoothChatService to write
            byte[] send = message.getBytes();
            btutil.write(send);

            // Reset out string buffer to zero and clear the edit text field
            mOutStringBuffer.setLength(0);
            //mOutEditText.setText(mOutStringBuffer);
        }
	}
	
    private void connectDevice() {
    	Log.d(TAG, "in connect");
    	Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();
    	BluetoothDevice device = pairedDevices.iterator().next();
    	Log.i(TAG, "device name is " + device.getName());
        // Attempt to connect to the device
        btutil.connect(device);
    }
        

}
